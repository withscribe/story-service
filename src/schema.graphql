type Query {
  allStories(skip: Int, first: Int, last: Int, before: ID, after: ID): [Story]
  stories(searchString: String!, skip: Int, first: Int, last: Int, before: ID, after: ID): [Story!]!
  storyById(storyID: ID!): Story
  storiesByAuthorId(authorId: ID!, skip: Int, first: Int, last: Int, before: ID, after: ID): [Story!]!
  storiesByNonAuthorId(nonAuthorId: ID!, skip: Int, first: Int, last: Int, before: ID, after: ID): [Story!]!
  storiesByCommunityId(communityId: ID!, skip: Int, first: Int, last: Int, before: ID, after: ID): [Story!]!
  searchByKeyword(searchString: String!, skip: Int, first: Int, last: Int, before: ID, after: ID): [Story!]!
  searchByAuthor(username: String!, skip: Int, first: Int, last: Int, before: ID, after: ID): [Story!]!
  searchByTitle(title: String!, skip: Int, first: Int, last: Int, before: ID, after: ID): [Story]
  searchByDescription(description: String!, skip: Int, first: Int, last: Int, before: ID, after: ID): [Story]
  getContributionsById(authorProfileId: ID, skip: Int, first: Int, last: Int, before: ID, after: ID): [Contribution!]!
  getContributionById(id: ID!): Contribution
  revisionById(id: ID!): Revision
}

type Mutation {
  createStory(
    title: String!,
    description: String!,
    author: String!
    content: String!,
    authorId: ID,
    communityId: ID,
  ): Story

  updateStory(
    id: ID!,
    title: String,
    description: String,
    content: String
  ): Story

  revertStory(
    storyId: ID!
    revisionId: ID!
  ): Story

  deleteStory(
    id: ID!
  ): Story

  cloneStory(
    parentStoryId: ID,
    nonAuthorId: ID
  ): Story

  addLikeToStory(
    storyId: ID,
    profileId: ID
  ) : Story

  removeLikeFromStory(
    storyId: ID,
    profileId: ID
  ) : Story

  forkStory(
    parentStoryId: ID,
    nonAuthorId: ID
  ): Story

  contributeRequest(
    storyId: ID,
    contributorName: String
    content: String,
  ): Contribution

  approveChanges (
    contributionId: ID,
  ): Story

  rejectChanges (
    contributionId: ID,
  ): Story

  addCommunityId(storyId: ID!, communityId: ID!): Story
  removeCommunityId(storyId: ID!): Story
}

# Models

type Story {
  id: ID!
  authorId: ID
  nonAuthorId: ID
  parentStoryId: ID,
  author: String
  coAuthors: [ID!]!
  isCloned: Boolean
  isForked: Boolean
  contributionPending: Boolean
  title: String!
  description: String
  content: String
  share: Boolean
  views: Int
  likes: Int
  usersWhoLiked: [Likes!]!
  clones: Int
  contributions: Int
  revisions: [Revision]
  createdAt: DateTime
  updatedAt: DateTime
  communityId: ID
}

type Contribution {
  id: ID!
  forkId: ID
  originalStoryId: ID
  contributorName: String
  contributorProfileId: ID
  authorProfileId: ID
  originalContent: String
  contributionContent: String
  comment: String
  updatedAt: DateTime
  createdAt: DateTime
}

type Revision {
  id: ID!
  title: String
  description: String
  content: String
  updatedAt: DateTime
  createdAt: DateTime
}

type Likes {
  id: ID!
  guid: String
}

scalar DateTime
